from abc import abstractmethod
from dataclasses import dataclass
from pathlib import Path
from typing import Optional, Protocol, Sequence, Union
from enum import Enum
from datetime import datetime
import os
import uuid

@dataclass
class DirectoryInfo:
    """
    Information about where and how to write a file.

    The bluesky event model splits the URI for a resource into two segments to aid in
    different applications mounting filesystems at different mount points.
    The portion of this path which is relevant only for the writer is the 'root',
    while the path from an agreed upon mutual mounting is the resource_path.
    The resource_dir is used with the filename to construct the resource_path.

    :param root: Path of a root directory, relevant only for the file writer
    :param resource_dir: Directory into which files should be written, relative to root
    :param filename: Base filename to use generated by FilenameProvider
    :param create_dir_depth: Optional depth of directories to create if they do not exist
    """

    root: Path
    resource_dir: Path
    filename: Optional[str] = ""
    create_dir_depth: Optional[int] = 0


class FilenameProvider(Protocol):

    @abstractmethod
    def __call__(self, prefix="", suffix="", device_name=None) -> str:
        """Get a filename to use for output data"""

class DirectoryProvider(Protocol):

    _filename_provider: FilenameProvider
    _prefix: Optional[str]
    _suffix: Optional[str]

    @abstractmethod
    def __call__(self, device_name=None) -> DirectoryInfo:
        """Get the current directory to write files into"""


class StaticFilenameProvider(FilenameProvider):
    def __init__(self, filename):
        self._static_filename = filename

    def __call__(self, prefix="", suffix="", device_name=None) -> str:
        return f'{prefix}{self._static_filename}{suffix}'


class DeviceNameFilenameProvider(FilenameProvider):

    def __call__(self, prefix="", suffix="", device_name=None) -> str:
        return f'{prefix}{device_name}{suffix}'


class UUIDFilenameProvider(FilenameProvider):

    def __call__(self, prefix="", suffix="", device_name=None) -> str:
        return f'{prefix}{uuid.uuid4()}{suffix}'


class StaticDirectoryProvider(DirectoryProvider):
    def __init__(
        self,
        filename_provider: FilenameProvider,
        directory_path: Union[str, Path],
        filename_prefix: str = "",
        filename_suffix: str = "",
        resource_dir: Path = Path("."),
        create_dir_depth: int = 0,
    ) -> None:
        self._filename_provider = filename_provider
        self._directory_path = directory_path
        if isinstance(directory_path, str):
            self._directory_path = Path(directory_path)
        self._resource_dir = resource_dir
        self._prefix = filename_prefix
        self._suffix = filename_suffix
        self._create_dir_depth = create_dir_depth

    def __call__(self, device_name=None) -> DirectoryInfo:
        return DirectoryInfo(
            root=self._directory_path,
            resource_dir=self._resource_dir,
            filename=self._filename_provider(prefix=self._prefix, suffix=self._suffix, device_name=device_name),
            create_dir_depth=self._create_dir_depth
        )


class YMDDirectoryProvider(DirectoryProvider):
    def __init__(
        self,
        filename_provider: FilenameProvider,
        directory_path: Union[str, Path],
        filename_prefix: str = "",
        filename_suffix: str = "",
        create_dir_depth: int = 0,
    ) -> None:
        self._filename_provider = filename_provider
        self._directory_path = directory_path
        self._prefix = filename_prefix
        self._suffix = filename_suffix
        self._create_dir_depth = create_dir_depth

    def __call__(self, device_name=None) -> DirectoryInfo:
        current_date = datetime.date()
        return DirectoryInfo(
            root=self._directory_path,
            resource_dir=os.path.join(current_date.year, current_date.month, current_date.day),
            filename=self._filename_provider(device_name=device_name),
            prefix=self._prefix,
            suffix=self._suffix
        )


class NameProvider(Protocol):
    @abstractmethod
    def __call__(self) -> str:
        """Get the name to be used as a data_key in the descriptor document"""


class ShapeProvider(Protocol):
    @abstractmethod
    async def __call__(self) -> tuple:
        """Get the shape of the data collection"""
