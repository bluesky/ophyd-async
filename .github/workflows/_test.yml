on:
  workflow_call:
    inputs:
      python-version:
        type: string
        description: The version of python to install
        required: true
      runs-on:
        type: string
        description: The runner to run this job on
        required: true
      tests-path:
        type: string
        description: The path to look for tests
        required: true
      needs-services:
        type: boolean
        description: Whether to start external services
        required: false
        default: false
    secrets:
      CODECOV_TOKEN:
        required: true

env:
  # https://github.com/pytest-dev/pytest/issues/2042
  PY_IGNORE_IMPORTMISMATCH: "1"

jobs:
  run:
    runs-on: ${{ inputs.runs-on }}

    steps:
      - name: Set TEMP to D:/Temp
        if: inputs.runs-on == 'windows-latest'
        run: |
          mkdir "D:\\Temp"
          echo "TEMP=D:\\Temp" >> $env:GITHUB_ENV

      - if: inputs.python-version == 'dev'
        name: Install dev versions of python packages
        uses: ./.github/actions/install_requirements

      - if: inputs.python-version == 'dev'
        name: Write the requirements as an artifact
        run: pip freeze --exclude-editable > /tmp/dev-requirements.txt

      - if: inputs.python-version == 'dev'
        name: Upload dev-requirements.txt
        uses: actions/upload-artifact@v4
        with:
          name: dev-requirements
          path: /tmp/dev-requirements.txt

      - if: inputs.python-version != 'dev'
        name: Install latest versions of python packages
        uses: ./.github/actions/install_requirements
        with:
          python-version: ${{ inputs.python-version }}
          pip-install: ".[dev]"

      - if: inputs.needs-services
        name: Install dev versions of python packages
        uses: ./.github/actions/install_requirements

      - if: inputs.needs-services
        name: Checkout simulated devices
        uses: actions/checkout@v4
        with:
          repository: epics-containers/example-services
          path: example-services
          ref: 'main'

      - if: inputs.needs-services
        name: Run docker compose
        uses: hoverkraft-tech/compose-action@v2.3.0
        with:
          compose-file: "./example-services/compose.yaml"
          services: |
            bl01t-di-cam-01
            ca-gateway
          
      - name: Run tests win
        if: inputs.runs-on == 'windows-latest'
        run: tox -e tests -- --timeout=6 ${{ inputs.tests-path}}

      - name: Non win tests
        if: inputs.runs-on != 'windows-latest'
        run: tox -e tests -- --timeout=2 ${{ inputs.tests-path}}
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          name: ${{ inputs.python-version }}/${{ inputs.runs-on }}
          files: cov.xml
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
